<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!--임소영  -->
<mapper namespace="sodb">

<resultMap type="so.SoVo" id="voMap"/>

 <select id='material_flist' resultMap="voMap" parameterType="so.SoVo">
     	select * from material order by mCode 
 </select>



 <select id='material_list' resultMap="voMap" parameterType="so.SoVo">
     	select * from material 
     	<if test="mCate != null">
     		where mCate = #{mCate} order by mCode 
     	</if>    	
 </select>

<select id='material_nlist' resultMap="voMap" parameterType="so.SoVo">
     <![CDATA[
      	 select * from material where mEa <= 50 order by mCode
      	]]>
  	</select>
  	
  	<select id='material_slist' resultMap="voMap" parameterType="so.SoVo">
      	 
      	 select * from material where mCode = #{findStr}
      	 
  	</select>
	

 
 	<select id='material_dlist' resultType="so.SoVo" parameterType="so.SoVo">
     	 
     	 select * from material where mCode = #{mCode}
     	 
 	</select>
 

<select id='check_mlist' resultMap="voMap" parameterType="so.SoVo">
   
     	select m.mcode,m.mname,v.vname,e.ename,m.mea,m.mprice
     	from material m 
     	join vender v on m.mpo=v.vcode 
     	join employees e on m.mdev=e.ecode
     	where m.mCode = #{mCode} 
		order by m.mCode
		
 </select>
 
<!-- 문서요청서  -->
 <select id='pdoc' resultMap="voMap" parameterType="so.SoVo">
     	select * from document order by dCode
    	
 </select>

	<!-- 팝업창으로 사원 찾기 -->
	<select id="searchEmp"  resultMap="voMap" parameterType="so.SoVo">
		select * from employees where ePosition=#{ePosition}
	</select>
	
		<!-- 팝업창으로 사원 찾기 ->사원개인의 개인정보 출력 -->
	<select id="searchEmp2"  resultMap="voMap" parameterType="so.SoVo">
		select * from employees where eCode=#{eCode}
	</select>

	<!-- Map은 ArrayList로 배열/ resultType은 하나만 추가할때
	(추가버튼을 눌렀을 때 하나의 항목만 추가되면 되니까 resultMap을 안써도 됨..!!)
	parameterType은 매개변수 타입이니까 Dao의 매개변수를 String형으로 쓰고 #{}안의 값과
	매개변수명과 같아야 한다. 
	
	-->
	<select id="materialSelectOne"  resultType="so.SoVo" parameterType="String">
		select m.mcode,m.mname,v.vname,e.ename,m.mea,m.mprice
     	from material m 
     	join vender v on m.mpo=v.vcode 
     	join employees e on m.mdev=e.ecode
     	where m.mCode = #{mCode} 
		order by m.mCode
	</select>
	
	<!-- 문서보고서 입력 -->
	<insert id='insert_document' parameterType='so.SoVo'>
		insert into document(dCode, dName, dDate, dWrite, dSign, dStatus, dCate)
		values((select max(dCode)+1 as dCode from Document),#{dName},#{dDate},#{dWrite},#{dSign},#{dStatus},#{dCate})
	</insert> 
	
	<!-- 구매보고서입력  -->
   <insert id="PurInput" parameterType="so.SoVo">
      insert into plist(pldcode,plmcode,plmodel,plpur,plmea,plprice)
      values((select max(dCode)+1 as dCode from Document),#{plMCode}, #{plModel},#{plPur}, #{plMEa},#{plPrice})
   </insert>
	 <!-- sale_view페이지 상단 로드 -->
    <select id='pur_view' resultMap="voMap" parameterType="so.SoVo">
      select * from document where dCode=#{dCode} and dCate=#{dCate}
   </select> 
   
      <select id='sale_view2' resultMap="voMap" parameterType="so.SoVo">
    		
	select m.mcode, m.mname, v.vname, p.plmea, m.mprice
     	from material m 
     	join plist p on p.plmcode = m.mcode 
     	join vender v on v.vcode = m.mpo
        where p.pldcode = #{dCode}
   </select> 
   
      <select id='find_name' resultMap="voMap" parameterType="so.SoVo">
      select * from employees where eCode = #{eCode}
   </select> 



	
<!-- 검색  -->
<select id='findStr' resultMap="voMap" parameterType="so.SoVo">
      	 
      select * from document where dCate='pur' 
      and (dName like '%${findStr}%' or dWrite like '%${findStr}%' or dCode like '%${findStr}%') 
      order by dStatus
      	 
  	</select>
  	
  	<!-- list 뿌려주기 -->
  	<select id="purlist"  resultMap="voMap" parameterType="so.SoVo">
		select d.dcode, d.dname, d.ddate, e.ename, d.dstatus 
		from document d
	    join employees e on d.dWrite = e.eCode 
		where d.dCate = 'pur' 
		order by d.dStatus DESC, d.dcode ASC
	</select>

</mapper>
